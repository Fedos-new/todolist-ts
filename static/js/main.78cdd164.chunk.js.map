{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","get","then","res","data","delete","post","tasksAPI","taskId","model","authAPI","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","id","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","apiModel","deadline","description","priority","startDate","resultCode","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","helperText","disabled","IconButton","onClick","color","PostAddOutlined","EditableSpan","editMode","setEditMode","onBlur","saveNewTitle","autoFocus","onDoubleClick","Task","changeTaskTitle","useCallback","newTitle","key","className","Completed","Checkbox","checked","changeTaskStatus","New","removeTask","Delete","Todolist","useDispatch","useEffect","items","addTasks","onClickRemoveTodolist","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","Button","TodolistsList","useSelector","store","auth","thunk","removeTaskTC","item","addTaskTC","changeStatus","addTodolist","addTodolistTC","removeTodolistTC","changeTodolistTitleTC","Grid","container","style","padding","spacing","allTodolistTask","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","label","margin","getFieldProps","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78cdd164.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": '3c9a379c-5299-4637-abd2-f49a30f8dddb'\r\n    }\r\n})\r\n\r\n//api\r\nexport default {\r\n    title: 'API'\r\n}\r\n\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists/').then(res => res.data)\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists/', {title: title})\r\n    },\r\n}\r\n\r\nexport const tasksAPI = {\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CreateDeleteUpdateTask<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CreateDeleteUpdateTask<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CreateDeleteUpdateTask<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<ResponseType<MeAuthResponseType>>(`auth/login`, data)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{ }>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type MeAuthResponseType ={\r\n    id:number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TodoTaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTaskType = {\r\n    items: Array<TaskType>\r\n    totalCount: string\r\n    error: null | string\r\n}\r\ntype CreateDeleteUpdateTask<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n// thunks\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {authAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type RequestErrorType = string | null\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: RequestErrorType\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: RequestErrorType }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setAppInitializedAC} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n            } else {\r\n            }\r\n            dispatch(setAppInitializedAC({isInitialized: true}))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppInitializedAC({isInitialized: true}))\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC,} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const slice = createSlice({\r\n    name: 'task',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ filter: FilterValuesType, id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n            state.map(tl => tl.id === action.payload.todolistId ? {\r\n                ...tl,\r\n                entityStatus: action.payload.entityStatus\r\n            } : tl)\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC\r\n} = slice.actions\r\n\r\n\r\n//thunks\r\nexport const fetchTodolistsTS = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'loading'}))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC({todolistId}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.createTodolist(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.updateTodolist(todolistId, title)\r\n            .then(res => {\r\n                dispatch(changeTodolistTitleAC({todolistId, title}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC\r\n} from \"./todolists-reducer\";\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const slice = createSlice({\r\n    name: 'task',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC({tasks, todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC({taskId, todolistId}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todoListId: string) => (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.createTask(todoListId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: res.data.data.item}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootState) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw  new Error('task not found in the state')\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskId, model, todolistId}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n\r\n//types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport '../../app/App.css';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {PostAddOutlined} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo ((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={title}\r\n                       variant={\"outlined\"}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       disabled={props.entityStatus === 'loading'}\r\n            />\r\n\r\n            <IconButton onClick={addItem}  color={\"primary\"} disabled={props.entityStatus === 'loading'}>\r\n                <PostAddOutlined />\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    saveNewTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: PropsType) => {\r\n    console.log('EditableSpan is called')\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const deActiveEditMode = () => {\r\n        setEditMode(false)\r\n        props.saveNewTitle(title)\r\n    }\r\n\r\n\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title}\r\n                 onBlur={deActiveEditMode}\r\n                 autoFocus={true}\r\n                 onChange={onChangeInput}/>\r\n        : <span onDoubleClick={activeEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\ntype TasksPropsType = {\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TasksPropsType) => {\r\n\r\n\r\n\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ?TaskStatuses.Completed:TaskStatuses.New,  props.todolistId)\r\n    }\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newTitle, props.todolistId)\r\n    }, [props.changeTaskTitle,props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            onChange={onChangeHandler}/>\r\n\r\n        <EditableSpan title={props.task.title} saveNewTitle={changeTaskTitle}/>\r\n        {/*<span>{t.title}</span>*/}\r\n        <IconButton onClick={onClickHandler} color={\"primary\"}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport '../../../app/App.css';\r\n import {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport { fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTasks: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nconst Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist is called')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    },[])\r\n\r\n\r\n\r\n\r\n    const addTasks = useCallback((title: string) => {\r\n        props.addTasks(title, props.id)\r\n    }, [props.addTasks, props.id])\r\n\r\n    const onClickRemoveTodolist = useCallback(() => props.removeTodolist(props.id), [props.id , props.removeTodolist])\r\n\r\n    const changeTodolistTitle = useCallback( (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.id, props.changeTodolistTitle ])\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter,props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter,props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter,props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed );\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3><EditableSpan title={props.title} saveNewTitle={changeTodolistTitle}/>\r\n                    <IconButton onClick={onClickRemoveTodolist} disabled={props.entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTasks} entityStatus={props.entityStatus}/>\r\n                <ul>\r\n                    {\r\n                        tasksForTodolist.map(t => <Task\r\n                            task={t}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                            removeTask={props.removeTask}\r\n                            todolistId={props.id}\r\n                            key={t.id}\r\n                        />)\r\n                    }\r\n\r\n                </ul>\r\n                <div>\r\n                    <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"}\r\n                            onClick={onAllClickHandler}>All\r\n                    </Button>\r\n                    <Button color={\"primary\"} variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n                            onClick={onActiveClickHandler}>Active\r\n                    </Button>\r\n                    <Button color={\"secondary\"} variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                            onClick={onCompletedClickHandler}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Todolist;\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, changeTodolistTitleTC,\r\n    fetchTodolistsTS,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport Todolist from \"./Todolist/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype TodolistsListsPropsType = {}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListsPropsType> = (props) => {\r\n\r\n    const todolists = useSelector<AppRootState, Array<TodolistDomainType>>(store => store.todolists)\r\n    const tasks = useSelector<AppRootState, TasksStateType>(store => store.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTS())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC({filter: value, id: todolistId})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const addTasks = useCallback((title: string, todoListId: string) => {\r\n        const thunk = addTaskTC(title, todoListId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistTC(title)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        const action = removeTodolistTC(todolistId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        const action = changeTodolistTitleTC(todolistId, newTitle)\r\n        dispatch(action)\r\n    }, [])\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodolist} entityStatus={'idle'}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTask = tasks[tl.id]\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        entityStatus={tl.entityStatus}\r\n                                        tasks={allTodolistTask}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTasks={addTasks}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>)\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {RequestErrorType, setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootState,RequestErrorType>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n\r\n        dispatch(setAppErrorAC({error : null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorsType = {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorsType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be more 3 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered&nbsp;\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email\r\n                            ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password\r\n                            ? <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                            : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n    Button,\r\n    Container,\r\n    LinearProgress,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route, Switch } from 'react-router-dom';\r\nimport { logoutTC } from '../features/Login/auth-reducer';\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootState, RequestStatusType >(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootState, boolean>(state => state.app.isInitialized )\r\n    const dispatch = useDispatch()\r\n\r\n    const logOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    \r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    \r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n           <ErrorSnackbar/>\r\n            <AppBar position=\"static\" className='bar'>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n\r\n                    {isInitialized && <Button color=\"inherit\" onClick={logOut}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            { status === 'loading' &&  <LinearProgress color=\"secondary\" />}\r\n            <Container fixed>\r\n                <Switch><Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route exact path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>Page Not Found - Error 404</h1>}/>\r\n                    <Redirect from={'/*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers} from \"redux\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer> //автомачически подтягивает типы из combineReducers\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}